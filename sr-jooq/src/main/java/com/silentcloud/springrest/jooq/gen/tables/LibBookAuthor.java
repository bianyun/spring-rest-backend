/*
 * This file is generated by jOOQ.
 */
package com.silentcloud.springrest.jooq.gen.tables;


import com.silentcloud.springrest.jooq.gen.DefaultSchema;
import com.silentcloud.springrest.jooq.gen.tables.records.LibBookAuthorRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LibBookAuthor extends TableImpl<LibBookAuthorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LIB_BOOK_AUTHOR</code>
     */
    public static final LibBookAuthor LIB_BOOK_AUTHOR = new LibBookAuthor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibBookAuthorRecord> getRecordType() {
        return LibBookAuthorRecord.class;
    }

    /**
     * The column <code>LIB_BOOK_AUTHOR.BOOK_ID</code>.
     */
    public final TableField<LibBookAuthorRecord, Long> BOOK_ID = createField(DSL.name("BOOK_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LIB_BOOK_AUTHOR.AUTHOR_ID</code>.
     */
    public final TableField<LibBookAuthorRecord, Long> AUTHOR_ID = createField(DSL.name("AUTHOR_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private LibBookAuthor(Name alias, Table<LibBookAuthorRecord> aliased) {
        this(alias, aliased, null);
    }

    private LibBookAuthor(Name alias, Table<LibBookAuthorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LIB_BOOK_AUTHOR</code> table reference
     */
    public LibBookAuthor(String alias) {
        this(DSL.name(alias), LIB_BOOK_AUTHOR);
    }

    /**
     * Create an aliased <code>LIB_BOOK_AUTHOR</code> table reference
     */
    public LibBookAuthor(Name alias) {
        this(alias, LIB_BOOK_AUTHOR);
    }

    /**
     * Create a <code>LIB_BOOK_AUTHOR</code> table reference
     */
    public LibBookAuthor() {
        this(DSL.name("LIB_BOOK_AUTHOR"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public LibBookAuthor as(String alias) {
        return new LibBookAuthor(DSL.name(alias), this);
    }

    @Override
    public LibBookAuthor as(Name alias) {
        return new LibBookAuthor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LibBookAuthor rename(String name) {
        return new LibBookAuthor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LibBookAuthor rename(Name name) {
        return new LibBookAuthor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
